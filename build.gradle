// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        google()
        jcenter()
    }

    ext {
        // rxJava 版本
        rx_java_version = '2.1.5'
        // rxAndroid 版本
        rx_andriod_version = '2.0.1'
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


project.afterEvaluate {
    println "afterEvaluate------>:"
//    updateGitHook.dependsOn(':app:assembleDebug')
//    updateGitHook.mustRunAfter(':app:assembleDebug')
//
//    updateGitHook.dependsOn('app:assembleDebug')
//    updateGitHook.mustRunAfter('app:assembleDebug')
//
//    updateGitHook.dependsOn(':assembleDebug')
//    updateGitHook.mustRunAfter(':assembleDebug')
//
//    updateGitHook.dependsOn('assembleDebug')
//    updateGitHook.mustRunAfter('assembleDebug')

//    println "name: ${name} "
//    if (name == "app") {
//        tasks.named("preBuild") {
//            dependsOn(updateGitHook)
//        }
//    }


    updateGitHook.execute()
}

/**
 * 更新Git Hook
 */
task updateGitHook(group: "fly") doLast {
    try {
        copy {
            from("${project.rootDir}/scripts${File.separator}git-hooks${File.separator}commit-msg")
            into("${project.rootDir}/.git${File.separator}hooks")
        }
        println "更新 ${name} 成功"
        "chmod +x .git/hooks/commit-msg".execute()
    } catch (ignored) {
        println "---------------updateGitHook出错啦啦啦啦啦啦啦啦啦啦啦--------------"
    }

}


//tasks.whenTaskAdded { task ->
//    println "whenTaskAdded---->${task.name}"
//    if (task.name == 'init') {
//        println "hahahh"
////        task.dependsOn(':updateGitHook')
//        updateGitHook.dependsOn(":preBuild")
//        updateGitHook.execute()
//    }
//}

//project.gradle.afterProject { project ->

//    println "afterproject---->${project.name}"
//    println "hahahh111---->${task.name}"
//    if (name == "bigovlog") {
//        tasks.named("preBuild") {
//            dependsOn(copyGitHookScriptTask)
//        }
//    }
//}

project.gradle.buildStarted { gradle ->
    println "buildStarted---->${gradle.gradleVersion}"
}



